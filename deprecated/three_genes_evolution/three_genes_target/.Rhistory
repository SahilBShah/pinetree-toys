pairwise.t.test(mlb$CS, mlb$League, p.adj='none')
pairwise.t.test(mlb$AVG, mlb$League, p.adj='none')
pairwise.t.test(mlb$OBP, mlb$League, p.adj='none')
pairwise.t.test(mlb$ASLG, mlb$League, p.adj='none')
pairwise.t.test(mlb$SLG, mlb$League, p.adj='none')
#Conducting a MONOVA test
man <- manova(cbind(AB, R, H, HR, RBI, SB, CS, AVG, OBP, SLG)~League, data=mlb)
summary.aov(man)
setwd("/home/sahil/Documents/SDS 348/")
mlb <- read.csv("mlb.csv")
mlb <- mlb %>% subset(League!='Both')
#Conducting a MONOVA test
man <- manova(cbind(AB, R, H, HR, RBI, SB, CS, AVG, OBP, SLG)~League, data=mlb)
summary.aov(man)
pairwise.t.test(mlb$AB, mlb$League, p.adj='none')
pairwise.t.test(mlb$R, mlb$League, p.adj='none')
pairwise.t.test(mlb$H, mlb$League, p.adj='none')
pairwise.t.test(mlb$HR, mlb$League, p.adj='none')
pairwise.t.test(mlb$RBI, mlb$League, p.adj='none')
pairwise.t.test(mlb$SB, mlb$League, p.adj='none')
pairwise.t.test(mlb$CS, mlb$League, p.adj='none')
pairwise.t.test(mlb$AVG, mlb$League, p.adj='none')
pairwise.t.test(mlb$OBP, mlb$League, p.adj='none')
pairwise.t.test(mlb$SLG, mlb$League, p.adj='none')
0.05 / 11 #Bonferroni correction
#Conducting a MONOVA test
man <- manova(cbind(AB, R, H, HR, RBI, SB, CS, AVG, OBP, SLG)~League, data=mlb)
summary.aov(man)
summary(man)
library(dplyr)
#Randomization test - t-test
t.test(AVG~League, data=mlb)
#Null distribution
rand_dist <- vector()
for(i in 1:5000){
df <- data.frame(AVG=sample(mlb$AVG), League=mlb$League)
rand_dist[i] <- mean(df[df$League=='American',]$AVG) - mean(df[df$League=='National',]$AVG)
}
mlb%>%group_by(League)%>%summarize(s=mean(AVG))%>%summarize(diff(s))
{hist(rand_dist); abline(v=c(-0.003326531	, 0.003326531), col='red')}
mean(rand_dist > 0.003326531)*2 #pvalue
#Randomization test - t-test
t.test(AVG~League, data=mlb)
#Linear regression model
library(ggplot2)
library(tidyverse)
library(lmtest)
library(sandwich)
new <- mlb
new$SLG <- new$SLG - mean(new$SLG)
new$AVG <- new$AVG - mean(new$AVG)
fit <- lm(new$AVG~new$SLG*new$League)
summary(fit)
coef(fit)
new%>%ggplot(aes(x=SLG,y=AVG))+geom_point(aes(color=League))+geom_line(aes(y=predict(fit, new),color=League),size=1)+theme(legend.position=c(.9,.19))+ggtitle("t-test controlling for SLG")
#Check linearity and homoskedstacity
resids<-fit$residuals
fitvals<-fit$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, color='red')
#Check normality
ggplot()+geom_qq(aes(sample=resids))+geom_qq_line(aes(sample=resids))
shapiro.test(resids) #Ho: distribution is normal
coeftest(fit, vcov=vcovHC(fit))
no_int <- lm(new$AVG~new$SLG+new$League)
summary(no_int)
#Linear regression model
library(ggplot2)
library(tidyverse)
library(lmtest)
library(sandwich)
new <- mlb
new$SLG <- new$SLG - mean(new$SLG)
new$AVG <- new$AVG - mean(new$AVG)
fit <- lm(new$AVG~new$SLG*new$League)
summary(fit)
coef(fit)
new%>%ggplot(aes(x=SLG,y=AVG))+geom_point(aes(color=League))+geom_line(aes(y=predict(fit, new),color=League),size=1)+theme(legend.position=c(.9,.19))+ggtitle("t-test controlling for SLG")
#Check linearity and homoskedstacity
resids<-fit$residuals
fitvals<-fit$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, color='red')
#Check normality
ggplot()+geom_qq(aes(sample=resids))+geom_qq_line(aes(sample=resids))
shapiro.test(resids) #Ho: distribution is normal
#Check normality
ggplot()+geom_qq(aes(sample=resids))+geom_qq_line(aes(sample=resids))
shapiro.test(resids) #Ho: distribution is normal
coeftest(fit, vcov=vcovHC(fit))
coef(fit)
summary(fit)
new <- mlb
new$SLG <- new$SLG - mean(new$SLG)
new$AVG <- new$AVG - mean(new$AVG)
fit <- lm(new$AVG~new$SLG*new$League)
summary(fit)
coef(fit)
new%>%ggplot(aes(x=SLG,y=AVG))+geom_point(aes(color=League))+geom_line(aes(y=predict(fit, new),color=League),size=1)+theme(legend.position=c(.9,.19))+ggtitle("t-test controlling for SLG")
#Check linearity and homoskedstacity
resids<-fit$residuals
fitvals<-fit$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, color='red')
#Check normality
ggplot()+geom_qq(aes(sample=resids))+geom_qq_line(aes(sample=resids))
shapiro.test(resids) #Ho: distribution is normal
coeftest(fit, vcov=vcovHC(fit))
coef(fit)
summary(fit)
coeftest(fit, vcov=vcovHC(fit))
summary(fit)
summary(fit)
summary(fit)
coeftest(fit, vcov=vcovHC(fit))
coeftest(fit, vcov=vcovHC(fit))
no_int <- lm(new$AVG~new$SLG+new$League)
summary(no_int)
coeftest(fit, vcov=vcovHC(fit))
no_int <- lm(new$AVG~new$SLG+new$League)
summary(no_int)
fit <- lm(new$AVG~new$SLG*new$League)
summary(fit)
#Proportion of variance
af <- anova(fit)
afss <- af$"Sum Sq"
print(cbind(af,PctExp=afss/sum(afss)*100))
summary(fit)
print(cbind(af,PctExp=afss/sum(afss)*100))
cbind(af,PctExp=afss/sum(afss)*100)
summary(fit)
#Proportion of variance
0.048725+0.004191+0.070752
#Bootstrapped SE's
samp_distn<-replicate(5000, {
boot_dat<-new[sample(nrow(new),replace=TRUE),]
fit1<-lm(AVG~SLG*League,data=boot_dat)
coef(fit1)
})
## Estimated SEs
samp_distn%>%t%>%as.data.frame%>%summarize_all(sd)
summary(fit)
summary(fit)
summary(samp_distn)
samp_distn%>%t%>%as.data.frame%>%summarize_all(p)
summary(fit1)
library(plotROC)
#Logistic regression
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
log_fit <- glm(League~AVG+SLG+HR+SB+OBP, data=mlb, family='binomial')
prob <- predict(log_fit, type='response')
class_diag(prob, mlb$League)
summary(log_fit)
prob <- predict(log_fit, type='response')
class_diag(prob, mlb$League)
28/47 #Precision
log_fit <- glm(League~AVG+SLG+HR+SB+OBP, data=mlb, family='binomial')
summary(log_fit)
prob <- predict(log_fit, type='response')
class_diag(prob, mlb$League)
#Confusion matrix
table(predict=as.numeric(prob>.5),truth=mlb$League)%>%addmargins
mlb$League <- ifelse(mlb$League=='National', 1, 0)
log_fit <- glm(League~AVG+SLG+HR+SB+OBP, data=mlb, family='binomial')
summary(log_fit)
prob <- predict(log_fit, type='response')
class_diag(prob, mlb$League)
#Confusion matrix
table(predict=as.numeric(prob>.5),truth=mlb$League)%>%addmargins
class_diag(prob, mlb$League)
#ROC and AUC
classify <- mlb %>% transmute(prob=predict(log_fit, type='response') , truth=League)
ROCplot <- ggplot(classify) + geom_roc(aes(d=truth, m=prob), n.cuts=0)
ROCplot
calc_auc(ROCplot)
summary(log_fit)
#10-fold
k=10
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
log_fit2<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(log_fit2, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
#10-fold
set.seed(1234)
k=10
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
log_fit2<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(log_fit2, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
#LASSO
library(glmnet)
y<-as.matrix(mlb$League)  ###save response variable
x<-model.matrix(log_fit)  ###save matrix of all predictors (dropping the response variable)
x <- x[,-1]
cv<-cv.glmnet(x,y,family="binomial")
lasso<-glmnet(x,y,family="binomial",lambda=cv$lambda.1se)
coef(lasso)
coef(lasso)
lasso<-glmnet(x,y,family="binomial",lambda=cv$lambda.1se)
coef(lasso)
fit<- glm(League~AVG+SLG+HR+SB+OBP, data=mlb, family='binomial')
prob <- predict(fit, type='response')
class_diag(prob, mlb$League)
k=10
k=10
# your code here
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
lasso_fit<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(lasso_fit, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
summary(log_fit)
prob <- predict(log_fit, type='response')
class_diag(prob, mlb$League)
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
k=10
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
log_fit2<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(log_fit2, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
#10-fold
set.seed(1234)
k=10
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
log_fit2<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(log_fit2, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
k=10
# your code here
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
lasso_fit<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(lasso_fit, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
set.seed(1234)
k=10
# your code here
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
lasso_fit<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(lasso_fit, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
set.seed(123)
k=10
# your code here
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
lasso_fit<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(lasso_fit, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
set.seed(1245)
k=10
# your code here
data1<-mlb[sample(nrow(mlb)),] #put dataset in random order
folds<-cut(seq(1:nrow(mlb)),breaks=k,labels=F) #create folds
diags<-NULL
for(i in 1:k){ # FOR EACH OF 10 FOLDS
train<-data1[folds!=i,] #CREATE TRAINING SET
test<-data1[folds==i,] #CREATE TESTING SET
truth<-test$League
lasso_fit<- glm(League~AVG+SLG+HR+SB+OBP, data=train, family='binomial')
probs<- predict(lasso_fit, newdata=test, type='response')
diags<-rbind(diags,class_diag(probs,truth))
}
apply(diags,2,mean) #AVERAGE THE DIAGNOSTICS ACROSS THE 10 FOLDS
library(dplyr)
setwd("/home/sahil/Documents/SDS 348/")
mlb <- read.csv("mlb.csv")
mlb <- mlb %>% subset(League!='Both')
#Conducting a MONOVA test
man <- manova(cbind(AB, R, H, HR, RBI, SB, CS, AVG, OBP, SLG)~League, data=mlb)
summary(man)
summary.aov(man)
0.05 / 1 #Bonferroni correction
#Randomization test - t-test
t.test(AVG~League, data=mlb)
#Null distribution
rand_dist <- vector()
for(i in 1:5000){
df <- data.frame(AVG=sample(mlb$AVG), League=mlb$League)
rand_dist[i] <- mean(df[df$League=='American',]$AVG) - mean(df[df$League=='National',]$AVG)
}
mlb%>%group_by(League)%>%summarize(s=mean(AVG))%>%summarize(diff(s))
{hist(rand_dist); abline(v=c(-0.003326531	, 0.003326531), col='red')}
mean(rand_dist > 0.003326531)*2 #pvalue
#Linear regression model
library(ggplot2)
library(tidyverse)
library(lmtest)
library(sandwich)
new <- mlb
new$SLG <- new$SLG - mean(new$SLG)
new$AVG <- new$AVG - mean(new$AVG)
fit <- lm(new$AVG~new$SLG*new$League)
summary(fit)
coef(fit)
new%>%ggplot(aes(x=SLG,y=AVG))+geom_point(aes(color=League))+geom_line(aes(y=predict(fit, new),color=League),size=1)+theme(legend.position=c(.9,.19))+ggtitle("t-test controlling for SLG")
#Check linearity and homoskedstacity
resids<-fit$residuals
fitvals<-fit$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, color='red')
#Check normality
ggplot()+geom_qq(aes(sample=resids))+geom_qq_line(aes(sample=resids))
shapiro.test(resids) #Ho: distribution is normal
coeftest(fit, vcov=vcovHC(fit))
no_int <- lm(new$AVG~new$SLG+new$League)
summary(no_int)
#Proportion of variance
0.048725+0.004191+0.070752
#Bootstrapped SE's
samp_distn<-replicate(5000, {
boot_dat<-new[sample(nrow(new),replace=TRUE),]
fit1<-lm(AVG~SLG*League,data=boot_dat)
coef(fit1)
})
## Estimated SEs
samp_distn%>%t%>%as.data.frame%>%summarize_all(sd)
library(plotROC)
#Logistic regression
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
mlb$League <- ifelse(mlb$League=='National', 1, 0)
log_fit <- glm(League~AVG+SLG+HR+SB+OBP, data=mlb, family='binomial')
summary(log_fit)
prob <- predict(log_fit, type='response')
class_diag(prob, mlb$League)
#Confusion matrix
table(predict=as.numeric(prob>.5),truth=mlb$League)%>%addmargins
#Density plot
mlb$logit<-predict(log_fit,type="link")
mlb$League <- as.factor(mlb$League)
mlb%>%ggplot()+geom_density(aes(logit,color=League,fill=League),alpha=.4)+theme(legend.position=c(.85,.85))+ geom_vline(xintercept=0)+xlab("predictor (logit)")
#ROC and AUC
classify <- mlb %>% transmute(prob=predict(log_fit, type='response') , truth=League)
ROCplot <- ggplot(classify) + geom_roc(aes(d=truth, m=prob), n.cuts=0)
ROCplot
#ROC and AUC
mlb$League <- ifelse(mlb$League=='National', 1, 0)
classify <- mlb %>% transmute(prob=predict(log_fit, type='response') , truth=League)
ROCplot <- ggplot(classify) + geom_roc(aes(d=truth, m=prob), n.cuts=0)
ROCplot
library(dplyr)
setwd("/home/sahil/Documents/SDS 348/")
mlb <- read.csv("mlb.csv")
mlb <- mlb %>% subset(League!='Both')
#Logistic regression
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
log_fit <- glm(League~AVG+SLG+HR+SB+OBP, data=mlb, family='binomial')
summary(log_fit)
prob <- predict(log_fit, type='response')
class_diag(prob, mlb$League)
#Confusion matrix
table(predict=as.numeric(prob>.5),truth=mlb$League)%>%addmargins
#Density plot
mlb$logit<-predict(log_fit,type="link")
mlb$League <- as.factor(mlb$League)
mlb%>%ggplot()+geom_density(aes(logit,color=League,fill=League),alpha=.4)+theme(legend.position=c(.85,.85))+ geom_vline(xintercept=0)+xlab("predictor (logit)")
mlb%>%ggplot()+geom_density(aes(logit,color=League,fill=League),alpha=.4)+theme(legend.position=c(.85,.85))+ geom_vline(xintercept=0)+xlab("predictor (logit)")
#ROC and AUC
mlb$League <- ifelse(mlb$League=='National', 1, 0)
classify <- mlb %>% transmute(prob=predict(log_fit, type='response') , truth=League)
ROCplot <- ggplot(classify) + geom_roc(aes(d=truth, m=prob), n.cuts=0)
ROCplot
log_fit <- glm(League~AVG+SLG+HR+SB+OBP, data=mlb, family='binomial')
summary(log_fit)
#Bootstrapped SE's
set.seed(12)
samp_distn<-replicate(5000, {
boot_dat<-new[sample(nrow(new),replace=TRUE),]
fit1<-lm(AVG~SLG*League,data=boot_dat)
coef(fit1)
})
## Estimated SEs
samp_distn%>%t%>%as.data.frame%>%summarize_all(sd)
summary(fit)
coeftest(fit, vcov=vcovHC(fit))
no_int <- lm(new$AVG~new$SLG+new$League)
summary(no_int)
install.packages("blogdown")
blogdown::install_hugo()
blogdown::new_site(theme="nurlansu/hugo-sustain", theme_example = T)
library(cowplot)
library(dplyr)
library(gridExtra)
library(ggplot2)
setwd("/home/wilkelab/pinetree-toys/deprecated/three_genes_evolution/three_genes_target/")
setwd("/home/sahil/pinetree-toys/deprecated/three_genes_evolution/three_genes_target/")
test <- read.table("deg_test1.tsv", header=TRUE)
test <- read.table("deg_test1.tsv", header=TRUE)
test <- filter(test, species == "proteinX" | species == "proteinY" | species == "proteinZ")
test_plot <- ggplot(test, aes(fill=species, color=species, x=time, y=transcript)) + geom_line(stat="identity") + ggtitle("Genome Function of Best Genome 2 Found")
test_plot
test <- read.table("deg_test1.tsv", header=TRUE)
test <- filter(test, species == "proteinX" | species == "proteinY" | species == "proteinZ")
test_plot <- ggplot(test, aes(fill=species, color=species, x=time, y=transcript)) + geom_line(stat="identity") + ggtitle("Genome Function of Best Genome 2 Found")
test_plot
test <- read.table("deg_test1.tsv", header=TRUE)
test <- filter(test, species == "proteinX" | species == "proteinY" | species == "proteinZ")
test_plot <- ggplot(test, aes(fill=species, color=species, x=time, y=transcript)) + geom_line(stat="identity") + ggtitle("Genome Function of Best Genome 2 Found")
test_plot
test <- read.table("deg_test1.tsv", header=TRUE)
test <- filter(test, species == "proteinX" | species == "proteinY" | species == "proteinZ")
test_plot <- ggplot(test, aes(fill=species, color=species, x=time, y=transcript)) + geom_line(stat="identity") + ggtitle("Genome Function of Best Genome 2 Found")
test_plot
