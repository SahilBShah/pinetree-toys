setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity") + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) +  scale_size_manual(values=c(2, 2, 2)) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity") + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) +  scale_size_manual(values=c(2, 2, 2)) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity") + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=2) + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1) + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=2) + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.background=element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=50), axis.title=element_text(size=10), plot.title=element_text(color='black', hjust=0.5)) + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=50), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
target_line_plot
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
ggsave("../../data/figures/figure1_target.png", prom_line_plot)
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
ggsave("../../data/figures/figure1_target.png", target_line_plot)
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#CC79A7", "#56B4E9", "#E69F00")) + panel_border()
ggsave("./figures/figure1_target.png", target_line_plot)
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("./grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("./figures/figure1_target.png", target_line_plot)
setwd("../../data/template_genome_data/")
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- best_files[1]
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
setwd("../../data/template_genome_data/")
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[1], header=TRUE)
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("./figures/figure1_gen0.png", line_plot)
setwd("../../data/template_genome_data/")
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[1], header=TRUE)
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../figures/figure1_gen0.png", line_plot)
setwd("../../data/template_genome_data/")
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[1], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../figures/figure1_gen0.png", line_plot)
setwd("../../data/template_genome_data/")
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[1], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../figures/figure1_gen0.png", line_plot)
#Set working directory to the directory in which the first output data is contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#List all transcript output files
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[2], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../../../figures/figure1_gen1.png", line_plot)
#Set working directory to the directory in which the first output data is contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#List all transcript output files
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[2], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../../../data/figures/figure1_gen1.png", line_plot)
#Set working directory to the directory in which the first output data is contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#List all transcript output files
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[length(best_files)], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../../../data/figures/figure1/figure1_genfinal.png", line_plot)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
all_sos_data <- read.table("sos_data.tsv", header=TRUE)
sos_data_acc <- all_sos_data %>% filter(Accepted=='yes')
sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares)) + geom_point(stat='identity', color='#56B4E9') + geom_line(size=1, stat='identity', color='#56B4E9') + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Generation") + ylab("Sum of Squares") + ggtitle("Fitness over Time") + panel_border()
sos_line_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Filter sum of squares data
all_sos_data <- read.table("sos_data.tsv", header=TRUE)
sos_data_acc <- all_sos_data %>% filter(Accepted=='yes')
#Create sum of squares plot and save it
sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares)) + geom_point(stat='identity', color='#56B4E9') + geom_line(size=1, stat='identity', color='#56B4E9') + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Generation") + ylab("Sum of Squares") + ggtitle("Fitness over Time") + panel_border()
ggsave("../../../data/figures/figure1/figure1_sos.png", sos_line_plot)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Filter sum of squares data
all_sos_data <- read.table("sos_data.tsv", header=TRUE)
sos_data_acc <- all_sos_data %>% filter(Accepted=='yes')
#Create sum of squares plot and save it
sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares)) + geom_point(stat='identity', color='#F0E442') + geom_line(size=1, stat='identity', color='#F0E442') + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Generation") + ylab("Sum of Squares") + ggtitle("Fitness over Time") + panel_border()
ggsave("../../../data/figures/figure1/figure1_sos.png", sos_line_plot)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Filter sum of squares data
all_sos_data <- read.table("sos_data.tsv", header=TRUE)
sos_data_acc <- all_sos_data %>% filter(Accepted=='yes')
#Create sum of squares plot and save it
sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares)) + geom_point(stat='identity', color='#0072B2') + geom_line(size=1, stat='identity', color='#0072B2') + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Generation") + ylab("Sum of Squares") + ggtitle("Fitness over Time") + panel_border()
ggsave("../../../data/figures/figure1/figure1_sos.png", sos_line_plot)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Filter sum of squares data
all_sos_data <- read.table("sos_data.tsv", header=TRUE)
sos_data_acc <- all_sos_data %>% filter(Accepted=='yes')
#Create sum of squares plot and save it
sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares)) + geom_point(stat='identity', color='#D55E00') + geom_line(size=1, stat='identity', color='#D55E00') + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Generation") + ylab("Sum of Squares") + ggtitle("Fitness over Time") + panel_border()
ggsave("../../../data/figures/figure1/figure1_sos.png", sos_line_plot)
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(grid)
library(reshape2)
library(gtools)
#Set working directory to the directory in which the target data is contained in
setwd("../../data/")
#Change grant_data name to the target file used
target_data <- read.table("grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("./figures/figure1/figure1_target.png", target_line_plot)
#Set working directory to the directory in which the template genome data is contained in
setwd("../../data/template_genome_data/")
#List all transcript output files
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[1], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../figures/figure1/figure1_gen0.png", line_plot)
#Set working directory to the directory in which the first output data is contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#List all transcript output files
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[2], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../../../data/figures/figure1/figure1_gen1.png", line_plot)
#Set working directory to the directory in which the first output data is contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#List all transcript output files
best_files <- list.files(pattern="three_genes_replicated_")
plot_data <- read.table(best_files[length(best_files)], header=TRUE)
plot_data <- filter(plot_data, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot and save it
line_plot <-  ggplot(plot_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=1.5) + ggtitle("Target Gene Expression Pattern") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Time") + ylab("Transcript Abundances") + scale_color_manual(values=c("#56B4E9", "#E69F00", "#CC79A7")) + panel_border()
ggsave("../../../data/figures/figure1/figure1_genfinal.png", line_plot)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Filter sum of squares data
all_sos_data <- read.table("sos_data.tsv", header=TRUE)
sos_data_acc <- all_sos_data %>% filter(Accepted=='yes')
#Create sum of squares plot and save it
sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares)) + geom_point(stat='identity', color='#D55E00') + geom_line(size=1, stat='identity', color='#D55E00') + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line=element_line(size=0.5), axis.ticks=element_line(), axis.text=element_text(size=10), axis.title=element_text(size=10), plot.title=element_text(color="black", hjust=0.5)) + xlab("Generation") + ylab("Sum of Squares") + ggtitle("Fitness over Time") + panel_border()
ggsave("../../../data/figures/figure1/figure1_sos.png", sos_line_plot)
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(grid)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
all_sos_data <- read.table("sos_data.tsv", header=TRUE)
sos_data_acc <- all_sos_data %>% filter(Accepted=='yes')
#sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares, color='red')) + geom_point(aes(color='red'), stat="identity") + geom_line(aes(color='red'), size= 1, stat="identity") + geom_line(data=all_sos_data, aes(x=Iteration, y=Sum_of_Squares), color='black') + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#panel.background = element_blank(), axis.line = element_line(color = "black")) + xlab("Sum of Squares") + ylab("Iteration")
sos_line_plot <- ggplot(sos_data_acc, aes(x=Iteration, y=Sum_of_Squares)) + geom_point(stat="identity") + geom_line(size= 1, stat="identity") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(color = "black", size=1), axis.ticks = element_line(colour = "black", size = 1), axis.text=element_text(size=30,face="bold"), axis.title=element_text(size=30,face="bold")) + xlab("Generation") + ylab("Sum of Squares")
sos_plots <- grid.arrange(sos_line_plot, nrow=1, top=textGrob("Fitness over Time", gp=gpar(fontsize=30, fontface="bold")))
#Change name of sos_graphs to a unique identifier
ggsave("../../../data/figures/sos_graphs_grant_data7_rep0_nf0.5.png", sos_plots, width=20, height=10)
library(reshape2)
library(gridExtra)
library(gtools)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
plots_list <- list()
best_files <- list.files(pattern="three_genes_replicated_")
best_files <- mixedsort(sort(best_files))
plots_list <- list()
#Change grant_data name to the target file used
target_data <- read.table("../../../data/grant_data7.tsv", header=TRUE)
target_data <- filter(target_data, species == "protein1" | species == "protein2" | species == "protein3")
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) + geom_line(stat="identity", size=2) + ggtitle("Target Genome Function") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(color = "black", size=1), axis.ticks = element_line(colour = "black", size = 1), axis.text=element_text(color="black",size=30,face="bold"), axis.title=element_text(size=30,face="bold"), plot.title=element_text(size = 25, face = "bold")) + scale_color_manual(values=c("#CC79A7", "#F0E442", "#0072B2")) + panel_border()
plots_list[[1]] <- target_line_plot
#Determines if there are too many accepted mutations and, if so, only display the last 20 that were accepted
starting_point <- 1
if (length(best_files) > 20){
starting_point <- length(best_files) - 20
}
plots_start <- 1
#Creates plots for each accepted mutation
for(i in starting_point:length(best_files)){
plots_start <- plots_start + 1
best <- "best"
evolution_title <- "Genome Evolution "
plot_title <- paste(evolution_title, i, sep="")
file_name <- assign(paste(best, i, sep=""), read.table(best_files[i], fill=TRUE, header=TRUE))
file_name <- filter(file_name, species == "protein1" | species == "protein2" | species == "protein3")
plot <- ggplot(file_name, aes(fill=species, color=species, size=species, x=time, y=transcript)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(color = "black", size=1), axis.ticks = element_line(colour = "black", size = 1), axis.text=element_text(color="black",size=30,face="bold"), axis.title=element_text(size=30,face="bold"), plot.title=element_text(size = 25, face = "bold")) + geom_line(stat="identity", size=2) + ggtitle(plot_title) + scale_color_manual(values=c("#CC79A7", "#F0E442", "#0072B2"))
plots_list[[plots_start]] <- plot
}
#Outputs file with the generated plots
evo_plot <- grid.arrange(grobs=plots_list, nrow=ceiling(length(plots_list) / 3), ncol=5, top=textGrob("Evolution of Gene Expression Pattern", gp=gpar(fontsize=30, fontface="bold")))
#Change name of saved graphs file to a unique identifier
ggsave("../../../data/figures/grant_data7_rep0_nf0.5.png", evo_plot, width=30, height=30, limitsize=FALSE)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(grid)
library(reshape2)
library(gtools)
library(yaml)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- melt(genome)
genome <- data.frame(genome)
View(genome)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
#genome <- melt(genome)
genome <- data.frame(genome)
View(genome)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=10, ymin=y1, ymax=y2), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=20, xmax=30, ymin=y1, ymax=y2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=40, xmax=50, ymin=y1, ymax=y2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm")))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
y1 = 1
y2 = 2
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=10, ymin=y1, ymax=y2), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=20, xmax=30, ymin=y1, ymax=y2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=40, xmax=50, ymin=y1, ymax=y2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm")))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
y1 = 1
y2 = 2
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=20, ymin=1, ymax=1.5), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=20, xmax=30, ymin=y1, ymax=y2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=40, xmax=50, ymin=y1, ymax=y2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm")))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
y1 = 1
y2 = 2
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=20, ymin=1, ymax=1.5), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=20, xmax=30, ymin=y1, ymax=y2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=40, xmax=50, ymin=y1, ymax=y2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm"))) + scale_x_continuous(breaks=c(0, 50, 10)) + scale_y_continuous(breaks=c(1,2,1))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
y1 = 1
y2 = 2
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=20, ymin=1, ymax=1.2), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=20, xmax=30, ymin=y1, ymax=y2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=40, xmax=50, ymin=y1, ymax=y2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm"))) + scale_x_continuous(breaks=c(0, 50, 10)) + scale_y_continuous(breaks=c(1,2,1))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
y1 = 1
y2 = 2
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=10, ymin=1, ymax=1.2), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=20, xmax=30, ymin=y1, ymax=y2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=40, xmax=50, ymin=y1, ymax=y2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm"))) + scale_x_continuous(breaks=c(0, 50, 10)) + scale_y_continuous(breaks=c(1,2,1))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
y1 = 1
y2 = 2
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=10, ymin=1, ymax=1.2), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=20, xmax=30, ymin=1, ymax=1.2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=40, xmax=50, ymin=1, ymax=1.2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm"))) + scale_x_continuous(breaks=c(0, 50, 10)) + scale_y_continuous(breaks=c(1,2,1))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- ggplot() + ggtitle("Beginning Genome Architecture") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_rect(data=genome, mapping=aes(xmin=1, xmax=20, ymin=1, ymax=1.2), fill="red", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=30, xmax=50, ymin=1, ymax=1.2), fill="green", alpha=0.5) + geom_rect(data=genome, mapping=aes(xmin=70, xmax=90, ymin=1, ymax=1.2), fill="blue", alpha=0.5) + geom_segment(mapping=aes(x=1, y=2, xend=1, yend=2.5), col="black") + geom_segment(mapping=aes(x=30, y=1.5, xend=40, yend=1.5)) + geom_segment(mapping=aes(x=10, y=1.5, xend=20, yend=1.5), color="black") + geom_segment(mapping=aes(x=1, y=2.5, xend=3, yend=2.5), color="black", arrow = arrow(length = unit(0.5, "cm"))) + scale_x_continuous(breaks=c(0, 100, 10)) + scale_y_continuous(breaks=c(1,2,1))
genome_plot
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- drawBox(1, 10, width=5, height=2)
library(draw)
install.packages("draw")
library(draw)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- drawBox(1, 10, width=5, height=2)
genome_plot
genome_plot <- drawBox(1, 10, width=5, height=2)
drawBox(1, 10, width=5, height=2)
library(draw)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
drawBox(1, 10, width=5, height=2, radius=5)
genome_plot
drawBox(1, 10, width=5, height=2, radius=5)
genome_plot <- drawBox(1, 10, width=5, height=2, radius=5)
genome_plot
library(draw)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- rect(1, 1, 5, 2)
library(plot)
library(plot.new)
library(draw)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- rect(1, 1, 5, 2)
library(draw)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- gplot() %>% rect(1, 1, 5, 2)
library(draw)
#Set working directory to the directory in which the results are contained in
setwd("../../results/2020_4_16/grant_data7_nf0.5_rep0_nmut3/")
#Load in yaml file
arch_files <- list.files(pattern="gene_")
arch_files <- mixedsort(sort(arch_files))
genome <- yaml.load_file(arch_files[1])
genome <- data.frame(genome)
genome_plot <- ggplot() %>% rect(1, 1, 5, 2)
