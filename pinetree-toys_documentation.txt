Outline
* Python Files
   * Evolution_final.py
   * Initialize_yaml.py
   * Mutation_choices.py
   * Mutation_test.py
   * Genome_simulator.py
   * Fitness_score.py
   * Sum_of_squares.py
   * File_setup.py
* R Files
   * Evolutionary_analysis.Rmd
   * Genome_architecture.Rmd
* Template Genome
   * The simulation begins with a promoter placed right before the first gene of the three genes.
   * The program as developed thus far does not allow for the dynamic ability to alter the number of genes, gene length, nor the intergenic regions.
* Evolution_final.py
   * Starting sum of squares value should be between 100,000 and 1,000,000 as any lower could restrict the simulation from finding a genome architecture and any higher would require a substantial increase in the amount of time the program may have to run.
   * Command line arguments
      * Filename
         * Target data file the user wants the simulation to try and achieve
      * Replicate number
         * One number that is needed to create unique output directories
      * N
         * The effective population size value that is needed to calculate fitness.
         * Recommended values are either 10 or 100.
      * Generation number
         * The number of times the user wants the simulation to run for.
      * Replicate mutation number
         * The number of times a user wants a mutation to be simulated in order to reduce variation within the stochastic model. 
      * N
         * Desired effective population size
      * Beta
         * Used to calculate fitness score and should be in relation to the initial sum of squares value.
         * For example, a starting sum of squares value of 1,000,000 should have a beta value of 0.001.
   * Output directory
      * All output will be placed in the results folder within pinetree-toys with a unique year, month, day.
      * Within each dated folder will contain the output folder with all the necessary data uniquely labeled by the target file name, effective population size, user inputted replicate number, and user inputted mutation number.
   * Possible mutations
      * Three mutations are currently possible
         * Promoters
         * Terminators
         * RNase Cleavage Sites
      * Intergenic regions of genome is sectioned out into thirds allowing one element to be placed in each third. This was done for computationally efficiency. However, a dynamic genomic program is currently being developed.
* Initialize_yaml.py
   * Outputs an initial YAML file with the genome architecture specifications.
   * Mutations occur by editing this file and inputting the specifications into the genome_simulator.py script.
* Mutation_choices.py
   * Three possible mutations are allowed for each element. Note: Types of elements are listed under the Evolution_final.py section.
      * Add
         * Any element can be added to the genome in either of the two intergenic regions that is sectioned into thirds.
      * Remove
         * Any element can be removed from the genome in either of the two intergenic regions and the potential terminator that may be placed at the end of the genome.
         * If no element is detected on the subset of one of the intergenic regions, then the program will continue as if no mutation had occurred.
      * Modify
         * Binding strength values may be altered within a specific range that the pinetree simulator allows for due to biological constraints.
   * Promoter
      * Adding a promoter functions as explained above.
      * Removing a promoter functions as explained above. However, the first promoter before the first gene cannot be removed due to biological constraints.
      * Any one of the promoter’s binding strengths can be altered within the specified range of 10e5 and 3e10 based on specifications from the pinetree simulator.
   * Terminator
      * Adding a terminator functions as explained above.
      * Removing a terminator functions as explained above.
      * Any one of the terminator’s efficiency values can be altered within a specified range of 0 and 1 based on specifications from the pinetree simulator.
   * RNase Cleavage Site
      * Adding an RNase site functions as explained above.
      * Removing an RNase site functions as explained above.
      * Any one of the RNase’s internal binding strengths can be altered within the specified range of 1e-2 and 10e17 based on specifications from the pinetree simulator.
* Mutation_test.py
   * Mutations are evaluated by running the pinetree simulator with the program’s genome specifications.
   * pinetree will run a simulation for the number of times the user specified when running the program.
   * The sum of squares value is calculated between the previously accepted genome architecture and the current mutated architecture.
* Genome.simulator.py
   * View pinetree documentation to determine the function of each variable here: https://pinetree.readthedocs.io/en/latest/
   * However, transcript degradation rates should be kept between 1e-2 and 10e17
* File_setup.py
   * In order to compare the two output files from the pinetree simulator, the output files have their columns and rows rearranged so that only transcripts can be compared to one another.
   * Rearrangement design
      * Three columns labeled: proteinX, proteinY, proteinZ
      * Each column contains the number of predicted transcripts at each time point.
      * Time is rounded to the nearest second in order for an easier comparison. 
* Sum_of_squares.py
   * Calculates the sum of squares value by finding the difference between the number of transcripts in the two output files produced at each time point and squares that value.
   * Each column is then added together to produce the sum of squares value.
* Fitness_score.py
   * Variables
      * N
         * Effective population size value
         * Recommended to be set at 10 or 100
      * Beta
         * Needs to be set in relation to the starting sum of squares value so that the fitness score does not become unrealistically large
         * For example, a starting sum of squares value of 1,000,000 should have a beta value of 0.001
         * More testing needs to be done to fully understand how beta affects the fitness score
      * Threshold
         * This means that we want to get to a sum of squares value as close to 0 as possible
      * Xi
         * Last accepted genome architecture’s fitness score
      * Xj
         * Current mutated genome’s fitness score
   * Equation for calculating fitness
      * Paper containing equation (Figure 2.7) can be found here: https://royalsocietypublishing.org/doi/pdf/10.1098/rsif.2016.0906
      * The equation is a modified version of the origin-fixation model which accounts for computational efficiency
* Random_data_generator.py
   * This file creates an arbitrary pattern that the user wants in order to use it as an input for the program.
* How to Use
   * Command line call
      * Order of command line arguments
         * python evolution_final.py [data filename.tsv] [replicate number] [number of generations] [number of tests per mutation] [effective population size] [beta value]
      * Defaults for each arguments are as follows:
         * Replicate number: 1
         * Number of generations: 1
         * Number of tests per mutation: 1
         * Effective population size: 10
         * Beta: 0.001
      * Ex. python evolution_final.py example_data.tsv 1 5000 5 10 0.001
   * TACC
      * Getting set up on TACC can be done by following this guide: https://portal.tacc.utexas.edu/user-guides/stampede2
      * Create a text file containing command line calls with the amount of simulations that the user wants to run
         * Ex. python3 ./evolution_final.py example_data.tsv 1 5000 5 10 0.001
      * Edit the TACC .slurm file
         * Parameters
            * -N
               * Number of nodes wanted
            * -n
               * Number of cores to use per node
            * -p
               * Queue name that the user wants to use
               * Queues available on TACC
                  *      * -t
   * The amount of time the user wants the simulations to run for
   * NOTE: Currently, simulations on TACC take approximately 3x longer to run - Working on fix
   * export  LAUNCHER_JOB_FILE=`pwd`/
   * Insert name of text file containing the command line arguments after the backslash, ‘/’.
   * Place both the text and .slurm files into the python folder: ~/pinetree-toys/src/python/
   * Run the following command once all the necessary files are prepared
   * sbatch [filename.slurm]
   * Evolutionary_analysis.Rmd
   * Produces the sum of squares plot and the evolutionary plot that shows how the genome evolved over time and what the end result found was
   * The directory paths must be changed for the directory in which the program needs to locate the necessary files and the directory in which to output the data files
   * As of now, under the “Evolutionary Analysis” section of the R markdown file, the number of plots generated from the .yml files and the number of rows and columns needed for the graph must be hard coded into the grid.arrange() function
   * Eg. grid.arrange(target_line_plot, best_plot1, best_plot2, best_plot3, nrow=3, ncol=3, top="Evolutionary Pattern of Gene Transcripts")
   * A more readable version of this program is currently being developed
   * Genome_architecture.Rmd
   * Produces a plot that visualizes the last genome architecture the evolutionary program found with its corresponding elements: promoters, terminator, and RNase cleavage sites
   * Promoters are denoted by an arrow
   * Terminators are denoted by a T
   * RNase cleavage sites are denoted by an X
   * The directory paths must be changed for which directory the program needs to locate the necessary files and he directory in which to output the data files