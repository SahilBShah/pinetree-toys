simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=10)) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.4, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=10),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
#Read in simulated tsv file an filter based on proteins
simulated_data <- read.table("expression_pattern_best.tsv", header=TRUE)
simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=10),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.4, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=8),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
#Read in simulated tsv file an filter based on proteins
simulated_data <- read.table("expression_pattern_best.tsv", header=TRUE)
simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=8),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.4, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=9),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
#Read in simulated tsv file an filter based on proteins
simulated_data <- read.table("expression_pattern_best.tsv", header=TRUE)
simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=9),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.4, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=10),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
#Read in simulated tsv file an filter based on proteins
simulated_data <- read.table("expression_pattern_best.tsv", header=TRUE)
simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=10),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.4, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
library(cowplot)
library(ggplot2)
library(dplyr)
library(grid)
library(gridExtra)
setwd("../../data/targets/")
#Read in file to create target pattern graph
target_data1 <- read.table("paper_data1_arrange5.tsv", header=TRUE)
target_data1 <- filter(target_data1, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot
target_line_plot1 <-  ggplot(target_data1, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
scale_y_continuous(limits=c(0,45), expand=c(0,0)) +
ylab('Target transcript abundance') +
xlab("Time (s)") +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
ggsave("../../figure_output/figure4/first_target_plot.png", target_line_plot1, height=3, width=3, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Read in file to create target pattern graph
target_data2 <- read.table("paper_data5_arrange1.tsv", header=TRUE)
target_data2 <- filter(target_data2, species == "protein1" | species == "protein2" | species == "protein3")
target_line_plot2 <-  ggplot(target_data2, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
scale_y_continuous(limits=c(0,45), expand=c(0,0)) +
ylab('Target transcript abundance') +
xlab("Time (s)") +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
ggsave("../../figure_output/figure4/second_target_plot.png", target_line_plot2, height=3, width=3, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=3, width=6, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
coor_fixed(ratio=1)
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
coor_fixed(ratio=1) +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
coord_fixed(ratio=1) +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm")) +
coord_fixed(ratio=1)
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_fixed(ratio=1) +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_fixed(ratio=0.67) +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"),
aspect.ratio = 0.67)
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=3, width=8, limitsize=FALSE, units="in")
