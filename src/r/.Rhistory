target_data1 <- read.table("paper_data1_arrange5.tsv", header=TRUE)
target_data1 <- filter(target_data1, species == "protein1" | species == "protein2" | species == "protein3")
#Create plot
target_line_plot1 <-  ggplot(target_data1, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
scale_y_continuous(limits=c(0,45), expand=c(0,0)) +
ylab('Target transcript abundance') +
xlab("Time (s)") +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
ggsave("../../figure_output/figure4/first_target_plot.png", target_line_plot1, height=3, width=3, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Read in file to create target pattern graph
target_data2 <- read.table("paper_data5_arrange1.tsv", header=TRUE)
target_data2 <- filter(target_data2, species == "protein1" | species == "protein2" | species == "protein3")
target_line_plot2 <-  ggplot(target_data2, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
scale_y_continuous(limits=c(0,45), expand=c(0,0)) +
ylab('Target transcript abundance') +
xlab("Time (s)") +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
ggsave("../../figure_output/figure4/second_target_plot.png", target_line_plot2, height=3, width=3, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=12, face="bold"),
axis.ticks.length = unit(2, "mm")) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
#Read in simulated tsv file an filter based on proteins
simulated_data <- read.table("expression_pattern_best.tsv", header=TRUE)
simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=12, face="bold"),
axis.ticks.length = unit(2, "mm")) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.4, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(viridis)
library(grid)
library(gridExtra)
library(cowplot)
library(reshape2)
setwd("../../results/figs_3_and_4/")
pattern <- c()
nrmse <- c()
best_patterns <- c()
tmp_avg <- 5.0
#Goes into each directory and finds the corresponding folders to extract normalized RMSE data for each subpattern ran
for(data in 1:10){
for(arrangement in 1:6){
data_name <- paste0("paper_data", data, "_arrange", arrangement)
pattern_name <- as.character(paste0(data,arrangement))
for(rep in 1:50){
if(dir.exists(paste0("./", data_name, "/rep", rep, "/final/"))){
rmse_data <- read.table(paste0("./", data_name, "/rep", rep, "/final/rmse_data.tsv"), header=TRUE)
rmse_data <- rmse_data %>% filter(Accepted=='yes')
min_rmse <- rmse_data$NRMSE[rmse_data$NRMSE == min(rmse_data$NRMSE)]
pattern[length(pattern) + 1] <- pattern_name
nrmse[length(nrmse) + 1] <- min_rmse
}
}
}
}
df <- data.frame(pattern, nrmse)
index <- 1
#If the mean is lower than the previous subplot then it is retained in the dataframe
for(data in 1:10){
for(arrangement in 1:6){
if(mean(df[df$pattern==as.character(paste0(data,arrangement)),]$nrmse) < tmp_avg){
best_patterns[index] <- as.character(paste0(data,arrangement))
tmp_avg <- mean(df[df$pattern==as.character(paste0(data,arrangement)),]$nrmse)
}
}
#Once entire "pattern" has been sorted through, move on to the next "pattern"
tmp_avg <- 5.0
index <- index + 1
}
#Reorganize the data so that they can be plotted in desired order
df <- df %>% filter(pattern %in% best_patterns)
df$pattern <- factor(df$pattern,levels = c(15,26,32,43,51,61,73,82,94,104))
nrmse_bp <- df %>% ggplot(aes(x=pattern, y=nrmse)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(color="black", size=0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Normalized RMSE") +
scale_y_continuous(limits=c(0, 0.35), expand=c(0,0)) +
scale_x_discrete(labels=c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")) +
geom_hline(yintercept = 0.1, linetype="solid", color = "red") +
theme(legend.position = "none",
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=15),
axis.title = element_text(size=15),
plot.margin = unit(c(4.0, 2.0, 0, -1.0), "mm"),
axis.ticks.length = unit(2, "mm"))
#Letter corresponding to plot in figure is added
nrmse_bp <- arrangeGrob(nrmse_bp, top=textGrob("B", x = unit(-0.02, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=20, fontfamily="Arial")))
plots <- list()
starting <- 1
skip <- 6
#Reads in tsv files containing transcript abundances
for(dat in 1:10){
target_data <- read.table(paste0("../../data/targets/paper_data", dat, "_arrange1.tsv"), header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3") & time != 301)
#Plots each pattern and modifies based on position of plot in outputted figure
if(starting == 1){
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.text = element_text(size=15),
axis.title = element_blank(),
plot.margin = unit(c(3.5, 2.5, 3.5, 7), "mm"),
axis.ticks.length = unit(2, "mm"))
}else if(starting == 6){
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
plot.margin = unit(c(2.5, 2.5, 6.0, 7), "mm"),
axis.text = element_text(size=15),
axis.title = element_blank(),
axis.ticks.length = unit(2, "mm"))
}else if(starting <= 5){
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin = unit(c(3.5, 2.5, 3.5, 3.5), "mm"),
axis.ticks.length = unit(2, "mm"))
}else{
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.text = element_text(size=15),
axis.title = element_blank(),
plot.margin = unit(c(2.5, 2.5, 6.0, 3.5), "mm"),
axis.ticks.length = unit(2, "mm"))
}
plots[[starting]] <- target_line_plot
starting <- starting + 1
}
#Labels plots with its corresponding lettering
for(i in 1:length(plots)){
if(i == 1){
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob("A", x = unit(-0.08, "npc"), y=unit(0.8, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=20, fontfamily="Arial")))
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.3, "npc"), y=unit(-2.25, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}else if(i <= 5){
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob("A", x = unit(0, "npc"), y=unit(0.4, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=20, fontfamily="Arial")))
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.15, "npc"), y=unit(-2.25, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}else if(i == 6){
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.3, "npc"), y=unit(-1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}else{
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.15, "npc"), y=unit(-1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}
}
figure3 <- grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], plots[[7]], plots[[8]], plots[[9]], plots[[10]], nrmse_bp, layout_matrix=rbind(c(1,2,3,4,5), c(6,7,8,9,10), c(11)), widths=c(2.6,2.2,2.2,2.2,2.2), bottom=textGrob("Time (s)", gp=gpar(fontsize=15, fontfamily="Arial"), vjust=-19, hjust=0.1), left=textGrob("Target transcript abundance", rot=90, gp=gpar(fontsize=15, fontfamily="Arial"), vjust=2.0, hjust=-0.03))
ggsave("../../figure_output/figure3/figure3.png", figure3, height=8, width=12, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
library(cowplot)
nrmse_ratios <- c(0.5002038733810914, 0.4984854031362939, 0.4717189300202526, 0.03286139689848213, 0.04466259779355728, 0.022548489894631128)
betas <- c(0.001, 0.01, 0.1, 1.0, 1.3, 2.0)
nrmse_sd <- c(0.1667346244603638, 0.15763492542579308, 0.1491706234281576, 0.01039168612939965, 0.014123553524765173, 0.007130458586432446)
df <- data.frame(betas, nrmse_ratios)
df$betas <- format(df$betas, scientific = FALSE)
nrmse_bar <- df %>% ggplot(aes(x=as.character(betas), y=nrmse_ratios)) +
geom_bar(stat='identity', fill="white", color="black") +
theme_cowplot() +
xlab("Beta values") +
ylab("Fraction of deleterious accepted mutations") +
scale_y_continuous(limits = c(0, 0.75), expand = c(0,0)) +
geom_errorbar(aes(ymin=nrmse_ratios-nrmse_sd, ymax=nrmse_ratios+nrmse_sd), width=0.2) +
theme(legend.position = "none")
nrmse_bar <- arrangeGrob(nrmse_bar, top=textGrob("B", x = unit(0.01, "npc"), y=unit(1.3, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=20, fontfamily="Arial")))
nrmse_plots <- list()
for(rep in c(107, 115, 130, 131, 145, 152)){
if(rep == 107){
beta <- "0.001"
}else if(rep == 115){
beta <- "0.010"
}else if(rep==130){
beta <- "0.100"
}else if(rep == 131){
beta <- "1.000"
}else if(rep == 145){
beta <- "1.300"
}else if(rep == 152){
beta <- "2.000"
}
nrmse <- read.table(paste0("../../results/nrmse_evaluation/paper_data1_rep", rep, "_nmut10/final/rmse_data.tsv"),
header=TRUE)
nrmse <- nrmse %>% filter(Accepted=='yes')
if(!(5000 %in% nrmse$Iteration)){
nrmse <- nrmse %>% add_row(Iteration=5000, NRMSE=nrmse$NRMSE[length(nrmse$NRMSE)], Accepted="yes")
}
if(rep != 152){
nrmse_line_plot <- ggplot(nrmse, aes(x=Iteration, y=NRMSE)) +
geom_point(stat='identity', color='#D55E00', size=1) +
geom_line(size=1, stat='identity', color='#D55E00') +
theme_cowplot() +
ylab("Root mean square error") +
scale_y_continuous(limits = c(0, 3.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(0, 5100), expand = c(0, 0)) +
panel_border(size=1, color="dark grey") +
theme(legend.position = "none",
axis.title = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank())
}else{
nrmse_line_plot <- ggplot(nrmse, aes(x=Iteration, y=NRMSE)) +
geom_point(stat='identity', color='#D55E00', size=1) +
geom_line(size=1, stat='identity', color='#D55E00') +
theme_cowplot() +
xlab("Generation") +
ylab("Root mean square error") +
scale_y_continuous(limits = c(0, 3.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(0, 5100), expand = c(0, 0)) +
panel_border(size=1, color="dark grey") +
theme(legend.position = "none",
axis.title.y = element_blank())
}
nrmse_line_plot <- arrangeGrob(nrmse_line_plot, top=textGrob(paste0("beta = ", beta),
x = unit(0.65, "npc"), y=unit(0.8, "npc"),
just=c("left","top"),
gp=gpar(col="black", font="bold", fontsize=15,
fontfamily="Arial")))
nrmse_plots[[length(nrmse_plots) + 1]] <- nrmse_line_plot
}
#Set the values for the x and y-axes
generations <- c(1:5000)
slope1 <- (1.1 - 1e-2) / (0.8 * 5000)
beta_val1 <- (slope1 * (generations[501:4500] - 500)) + 1e-2
slope2 <- (1.3 - 1.1) / (0.1 * 5000)
beta_val2 <- (slope2 * (generations[4501:5000] - 4500)) + 1.1
beta <- c(rep(0.01, 500), beta_val1, beta_val2)
fitness_landscape <- data.frame(generations, beta)
beta_plot <- fitness_landscape %>% ggplot(aes(x=generations, y=beta)) +
geom_line(size=1, stat='identity', color='#000000') +
theme_cowplot() +
xlab("Generation") +
ylab("Beta value (log scale)") +
panel_border(size=1, color="dark grey") +
scale_y_log10() +
theme(legend.position = "none",
plot.title = element_blank())
beta_plot <- arrangeGrob(beta_plot, top=textGrob("C", x = unit(0, "npc"), y=unit(1.3, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=20, fontfamily="Arial")))
nrmse_supp <- grid.arrange(nrmse_plots[[1]], nrmse_plots[[2]], nrmse_plots[[3]], nrmse_plots[[4]], nrmse_plots[[5]], nrmse_plots[[6]], nrmse_bar, beta_plot, layout_matrix=rbind(cbind(c(1,2,3,4,5,6), c(7)), c(8)), left=textGrob("Normalized RMSE", gp=gpar(fontsize=15), rot=90, y=unit(0.6, "npc")), top=textGrob("A",just=c("left","top"), x = unit(-0.01, "npc"), y=unit(0.4, "npc"), gp=gpar(col="black", font="bold", fontsize=20,fontfamily="Arial")), heights=c(1,1,1,1,1,1.35,2,1))
ggsave("../../figure_output/figure_nrmse/nrmse_supplemental.png", nrmse_supp, height=12, width=9, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(grid)
library(reshape2)
library(gtools)
library(png)
get_limits <- function(all_files){
ratios <- c()
for (f in 1:length(all_files)){
protein1 <- read.table(all_files[f], header=TRUE, fill=TRUE) %>% filter(time==239, species=='protein1') %>% select('transcript')
protein2 <- read.table(all_files[f], header=TRUE, fill=TRUE) %>% filter(time==239, species=='protein2') %>% select('transcript')
if(nrow(protein2) != 0){
ratios[f] <- protein2$transcript/protein1$transcript
}else{
ratios[f] <- 0
}
}
return(sd(ratios)/sqrt(length(ratios)))
}
setwd('../../results/element_strength_testing/promoter/average/')
#List promoter files
prom_files <- list.files(pattern="promoter_average_test_")
prom_files <- mixedsort(sort(prom_files))
#Set x-axis scale
prom_x_data <- c(10e5, 25e5, 50e5, 75e5, 10e6, 25e6, 50e6, 75e6, 10e7, 25e7, 50e7, 75e7, 10e8)
prom_x_names <- c("10e5", "25e5", "50e5", "75e5", "10e6", "25e6", "50e6", "75e6", "10e7", "25e7", "50e7", "75e7", "10e8")
prom_y_data <- c()
#Get transcript abundace at time point 239 seconds
for (i in 1:length(prom_files)){
p1_data <- read.table(prom_files[i], header=TRUE) %>% filter(time==239, species=='protein1') %>% select('transcript')
p2_data <- read.table(prom_files[i], header=TRUE) %>% filter(time==239, species=='protein2') %>% select('transcript')
if (nrow(p2_data) != 0){
prom_y_data[i] <- p2_data$transcript/p1_data$transcript
}else{
prom_y_data[i] <- 0
}
}
#Create dataframe for ggplot
prom_data <- data.frame(cbind(prom_x_data, prom_y_data))
colnames(prom_data) <- c('strengths','values')
#Enters working directory where the averages were calculated from
setwd('../')
#Gets averages of each numerical value for error bars
prom_means <- c()
for(p in 1:length(prom_x_data)){
prom <- list.files(pattern=paste("promoter_test_", prom_x_names[p], sep=''))
prom <- mixedsort(sort(prom))
prom_means[p] <- get_limits(prom)
}
#Create plot
prom_log_plot <- ggplot(prom_data, aes(x=strengths, y=values)) +
geom_point(stat='identity', color='#009E73', size=2) +
geom_line(size=1, stat='identity', color='#009E73') +
theme_cowplot() +
xlab("Promoter strength (log scale)") +
ylab("Normalized transcript abundance\n(log scale)") +
panel_border() +
geom_errorbar(aes(ymin=prom_y_data-prom_means, ymax=prom_y_data+prom_means)) +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = 1e7, linetype="dashed", color = "dark grey") +
theme(plot.margin = unit(c(4.5, 5, 4.5, 5), "mm"))
setwd('../../results/element_strength_testing/terminator/average/')
#List terminator files
term_files <- list.files(pattern="terminator_average_test_")
term_files <- mixedsort(sort(term_files))
#Set x-axis scale
term_x_data <- c(0.0, 0.05, 0.1,
0.15, 0.2,
0.25, 0.3,
0.35, 0.4,
0.45, 0.5,
0.55, 0.6,
0.65, 0.7,
0.75, 0.8,
0.85, 0.9,
0.95, 1.0)
term_y_data <- c()
#Get transcript abundaces at time point 239 seconds and calculate ratio between protein2 and protein1 abundances
for (i in 1:length(term_files)){
p1_data <- read.table(term_files[i], header=TRUE) %>% filter(time==239, species=='protein1') %>% select('transcript')
p2_data <- read.table(term_files[i], header=TRUE) %>% filter(time==239, species=='protein2') %>% select('transcript')
if (nrow(p2_data) != 0){
term_y_data[i] <- p2_data$transcript/p1_data$transcript
}else{
term_y_data[i] <- 0
}
}
#Create dataframe needed for ggplot
term_data <- data.frame(cbind(term_x_data, term_y_data))
colnames(term_data) <- c('strengths','values')
#Enters working directory where the averages were calculated from
setwd('../')
#Gets averages of each numerical value for error bars
term_means <- c()
for(t in 1:length(term_x_data)){
term <- list.files(pattern=paste("terminator_test_", term_x_data[t], sep=''))
term <- mixedsort(sort(term))
term_means[t] <- get_limits(term)
}
#Create plot
term_line_plot <- ggplot(term_data, aes(x=strengths, y=values)) +
geom_point(stat='identity', color='#009E73', size=2) +
geom_line(size=1, stat='identity', color='#009E73') +
theme_cowplot() +
xlab("Terminator strength") +
ylab("Normalized transcript abundance") +
panel_border() +
geom_errorbar(aes(ymin=term_y_data-term_means, ymax=term_y_data+term_means)) +
geom_vline(xintercept = 0.2, linetype="dashed", color = "dark grey") +
theme(plot.margin = unit(c(4.5, 7, 4.5, 3), "mm"))
setwd('../../results/element_strength_testing/rnase/average/')
#List all rnase files
rnase_files <- list.files(pattern="rnase_average_test_")
rnase_files <- mixedsort(sort(rnase_files))
#Set x-axis scale
rnase_x_data <- c(0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
rnase_y_data <- c()
#Get transcript abundaces at time point 239 seconds and calculate ratio between protein2 and protein1 abundances
for (i in 1:length(rnase_files)){
p1_data <- read.table(rnase_files[i], header=TRUE) %>% filter(time==239, species=='protein1') %>% select('transcript')
p2_data <- read.table(rnase_files[i], header=TRUE) %>% filter(time==239, species=='protein2') %>% select('transcript')
if (nrow(p2_data) != 0){
rnase_y_data[i] <- p2_data$transcript/p1_data$transcript
}else{
rnase_y_data[i] <- 0
}
}
#Create dataframe needed for ggplot
rnase_data <- data.frame(cbind(rnase_x_data, rnase_y_data))
colnames(rnase_data) <- c('strengths','values')
#Enters working directory where the averages were calculated from
setwd('../')
#Gets averages of each numerical value for error bars
rnase_means <- c()
for(r in 1:length(rnase_x_data)){
rnase <- list.files(pattern=paste("rnase_test_", rnase_x_data[r], sep=''))
rnase <- mixedsort(sort(rnase))
rnase_means[r] <- get_limits(rnase)
}
#Create plots
#Log scaled plot
rnase_log_plot <- ggplot(rnase_data, aes(x=strengths, y=values)) +
geom_point(stat='identity', color='#009E73', size=2) +
geom_line(size=1, stat='identity', color='#009E73') +
theme_cowplot() +
xlab("RNAse strength (log scale)") +
ylab("Normalized transcript abundance\n(log scale)") +
panel_border() +
geom_errorbar(aes(ymin=rnase_y_data-rnase_means, ymax=rnase_y_data+rnase_means)) +
scale_y_log10() +
scale_x_log10() +
geom_vline(xintercept = 5e-3, linetype="dashed", color = "dark grey") +
theme(plot.margin = unit(c(4.5, 1.0, 4.5, 0.5), "mm"))
setwd("../../figure_output/figure_element_strengths/")
#Read in genome architecture images
prom_arch <- readPNG("promoter_genome_arch.png")
term_arch <- readPNG("terminator_genome_arch.png")
rnase_arch <- readPNG("rnase_genome_arch.png")
param_figure <- grid.arrange(rasterGrob(prom_arch, vjust=5.0, hjust=0.4, width=0.80), rasterGrob(term_arch, vjust=5.0, hjust=0.45, width=0.80), rasterGrob(rnase_arch, vjust=5.0, hjust=0.4, width=0.80), prom_log_plot, term_line_plot, rnase_log_plot, layout_matrix=rbind(c(1,2,3), c(4,5,6)))
ggsave("parameters_figure.png", param_figure, height=9, width=14, limitsize=FALSE, units="in")
