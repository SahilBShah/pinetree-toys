setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_fixed(ratio=1) +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_fixed(ratio=0.67) +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"),
aspect.ratio = 0.67)
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=4, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black") +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=3, width=8, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=8),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=8),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
#Read in simulated tsv file an filter based on proteins
simulated_data <- read.table("expression_pattern_best.tsv", header=TRUE)
simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=8),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.2, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
knitr::opts_chunk$set(echo = TRUE)
library(cowplot)
library(dplyr)
library(ggplot2)
library(ggsci)
library(grid)
library(gridExtra)
library(png)
color_palette <- c("#00468BFF", "#42B540FF", "#0099B4FF", "#925E9FFF", "#FDAF91FF", "#AD002AFF", "#ADB6B6FF", "#1B1919FF", "#ED0000FF", "#024B30")
setwd("../../data/targets/")
#Read in target tsv file and filter for only proteins
target_data <- read.table("ten_genes.tsv", header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Target pattern") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=8),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
target_line_plot <- arrangeGrob(target_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../results/fig5/ten_genes/rep14/final/")
#Read in simulated tsv file an filter based on proteins
simulated_data <- read.table("expression_pattern_best.tsv", header=TRUE)
simulated_data <- filter(simulated_data, (species == "protein1" | species == "protein2" | species == "protein3" | species == "protein4" | species == "protein5" | species == "protein6" | species == "protein7" | species == "protein8" | species == "protein9" | species == "protein10") & time != 301)
#Create line plot
simulated_line_plot <-  ggplot(simulated_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_y_continuous(limits=c(0,40), expand=c(0,0)) +
ylab('Transcript abundance') +
xlab("Time (s)") +
ggtitle("Evolved pattern") +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=10, face="bold"),
axis.ticks.length = unit(2, "mm"),
axis.text = element_text(size=8),
axis.title = element_text(size=11)) +
scale_color_manual(values=color_palette) +
panel_border()
simulated_line_plot <- arrangeGrob(simulated_line_plot, top=textGrob("A", x = unit(0, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=10, fontfamily="Arial")))
setwd("../../figure_output/figure5/")
#Read in genome architecture
img_starting <- readPNG("figure5_genome_arch_starting.png")
img_final <- readPNG("figure5_genome_arch_final.png")
img_starting <- arrangeGrob(rasterGrob(img_starting, vjust=-4.25), top=textGrob("B", x = unit(0, "npc"), y=unit(2.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=10, fontfamily="Arial")))
img_starting <- arrangeGrob(img_starting, top=textGrob("Starting architecture", x = unit(0.35, "npc"), y=unit(0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
img_final <- arrangeGrob(rasterGrob(img_final, vjust=-12.25), top=textGrob("Final architecture", x = unit(0.37, "npc"), y=unit(8.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=12, fontfamily="Arial")))
#Arrange plots
figure5 <- grid.arrange(target_line_plot, simulated_line_plot, img_starting, img_final, layout_matrix=rbind(c(1, 2), c(3), c(4)), widths=c(2.3, 2))
#Save as figure 5
ggsave("figure5.png", figure5, height=7, width=5, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="grey", width-0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(grid)
library(gridExtra)
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="grey", width-0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="grey", width=0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=3, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="black", width=0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=3, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="dark grey", color="dark grey", width=0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=3, width=8, limitsize=FALSE, units="in")
setwd("../../data/targets/")
#Set entropy values for each pattern
patterns <- c(1,2,3,4,5,6,7,8,9,10)
entropy <- c(3.5588108279845434, 3.990009704040741, 3.676440908696869, 3.813566073017023, 4.945038697540245, 3.121928094887363, 3.6732696895151085, 4.152518266288632, 3.646439344671015, 1.0)
entropy_df <- data.frame(Pattern=patterns, Entropy=entropy)
#Create entropy plot
entropy_bar_plot <- entropy_df %>% ggplot(aes(x=Pattern, y=Entropy)) +
geom_bar(stat='identity', fill="grey", color="grey", width=0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Entropy (bits)") +
coord_flip() +
scale_x_reverse(breaks=c(1:10)) +
scale_y_continuous(limits=c(0, 5.5), expand=c(0,0)) +
panel_border() +
theme(legend.position = "none",
axis.ticks.length = unit(2, "mm"))
#Save entropy bar plot
ggsave("../../figure_output/figure4/entropy_bar_plot.png", entropy_bar_plot, height=3, width=8, limitsize=FALSE, units="in")
library(dplyr)
library(ggplot2)
library(viridis)
library(grid)
library(gridExtra)
library(cowplot)
library(reshape2)
setwd("../../results/figs_3_and_4/")
setwd("../../results/figs_3_and_4/")
pattern <- c()
nrmse <- c()
best_patterns <- c()
tmp_avg <- 5.0
#Goes into each directory and finds the corresponding folders to extract normalized RMSE data for each subpattern ran
for(data in 1:10){
for(arrangement in 1:6){
data_name <- paste0("paper_data", data, "_arrange", arrangement)
pattern_name <- as.character(paste0(data,arrangement))
for(rep in 1:50){
if(dir.exists(paste0("./", data_name, "/rep", rep, "/final/"))){
rmse_data <- read.table(paste0("./", data_name, "/rep", rep, "/final/rmse_data.tsv"), header=TRUE)
rmse_data <- rmse_data %>% filter(Accepted=='yes')
min_rmse <- rmse_data$NRMSE[rmse_data$NRMSE == min(rmse_data$NRMSE)]
pattern[length(pattern) + 1] <- pattern_name
nrmse[length(nrmse) + 1] <- min_rmse
}
}
}
}
df <- data.frame(pattern, nrmse)
index <- 1
#If the mean is lower than the previous subplot then it is retained in the dataframe
for(data in 1:10){
for(arrangement in 1:6){
if(mean(df[df$pattern==as.character(paste0(data,arrangement)),]$nrmse) < tmp_avg){
best_patterns[index] <- as.character(paste0(data,arrangement))
tmp_avg <- mean(df[df$pattern==as.character(paste0(data,arrangement)),]$nrmse)
}
}
#Once entire "pattern" has been sorted through, move on to the next "pattern"
tmp_avg <- 5.0
index <- index + 1
}
#Reorganize the data so that they can be plotted in desired order
df <- df %>% filter(pattern %in% best_patterns)
df$pattern <- factor(df$pattern,levels = c(15,26,32,43,51,61,73,82,94,104))
View(df)
?write.csv
write.csv(df, file="../../results/figure3_data.csv")
write.csv(df, file="../../results/figure3_data.csv", row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(viridis)
library(grid)
library(gridExtra)
library(cowplot)
library(reshape2)
df <- read.csv("../../results/figure3_data.csv")
nrmse_bp <- df %>% ggplot(aes(x=pattern, y=nrmse)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(color="black", size=0.5) +
theme_cowplot() +
xlab("Pattern") +
ylab("Normalized RMSE") +
scale_y_continuous(limits=c(0, 0.35), expand=c(0,0)) +
scale_x_discrete(labels=c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")) +
geom_hline(yintercept = 0.1, linetype="solid", color = "red") +
theme(legend.position = "none",
axis.text.x = element_text(size=17),
axis.text.y = element_text(size=15),
axis.title = element_text(size=15),
plot.margin = unit(c(4.0, 2.0, 0, -1.0), "mm"),
axis.ticks.length = unit(2, "mm"))
#Letter corresponding to plot in figure is added
nrmse_bp <- arrangeGrob(nrmse_bp, top=textGrob("B", x = unit(-0.02, "npc"), y=unit(1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=20, fontfamily="Arial")))
plots <- list()
starting <- 1
skip <- 6
#Reads in tsv files containing transcript abundances
for(dat in 1:10){
target_data <- read.table(paste0("../../data/targets/paper_data", dat, "_arrange1.tsv"), header=TRUE)
target_data <- filter(target_data, (species == "protein1" | species == "protein2" | species == "protein3") & time != 301)
#Plots each pattern and modifies based on position of plot in outputted figure
if(starting == 1){
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.text = element_text(size=15),
axis.title = element_blank(),
plot.margin = unit(c(3.5, 2.5, 3.5, 7), "mm"),
axis.ticks.length = unit(2, "mm"))
}else if(starting == 6){
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
plot.margin = unit(c(2.5, 2.5, 6.0, 7), "mm"),
axis.text = element_text(size=15),
axis.title = element_blank(),
axis.ticks.length = unit(2, "mm"))
}else if(starting <= 5){
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
plot.margin = unit(c(3.5, 2.5, 3.5, 3.5), "mm"),
axis.ticks.length = unit(2, "mm"))
}else{
target_line_plot <-  ggplot(target_data, aes(fill=species, color=species, size=species, x=time, y=transcript)) +
geom_line(stat="identity", size=1) +
theme_cowplot() +
scale_color_manual(values=c("#000000", "#000000", "#000000")) +
panel_border(size=1, color="grey") +
scale_y_continuous(limits = c(0, 45), expand = c(0, 0)) +
theme(legend.position = "none",
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.text = element_text(size=15),
axis.title = element_blank(),
plot.margin = unit(c(2.5, 2.5, 6.0, 3.5), "mm"),
axis.ticks.length = unit(2, "mm"))
}
plots[[starting]] <- target_line_plot
starting <- starting + 1
}
#Labels plots with its corresponding lettering
for(i in 1:length(plots)){
if(i == 1){
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob("A", x = unit(-0.08, "npc"), y=unit(0.8, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=20, fontfamily="Arial")))
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.3, "npc"), y=unit(-2.25, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}else if(i <= 5){
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob("A", x = unit(0, "npc"), y=unit(0.4, "npc"), just=c("left","top"), gp=gpar(col="white", font="bold", fontsize=20, fontfamily="Arial")))
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.15, "npc"), y=unit(-2.25, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}else if(i == 6){
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.3, "npc"), y=unit(-1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}else{
plots[[i]] <- arrangeGrob(plots[[i]], top=textGrob(paste0(i), x = unit(0.15, "npc"), y=unit(-1.0, "npc"), just=c("left","top"), gp=gpar(col="black", font="bold", fontsize=17, fontfamily="Arial")))
}
}
figure3 <- grid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], plots[[7]], plots[[8]], plots[[9]], plots[[10]], nrmse_bp, layout_matrix=rbind(c(1,2,3,4,5), c(6,7,8,9,10), c(11)), widths=c(2.6,2.2,2.2,2.2,2.2), bottom=textGrob("Time (s)", gp=gpar(fontsize=15, fontfamily="Arial"), vjust=-19, hjust=0.1), left=textGrob("Target transcript abundance", rot=90, gp=gpar(fontsize=15, fontfamily="Arial"), vjust=2.0, hjust=-0.03))
figure3
